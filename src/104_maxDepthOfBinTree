#!/bin/python3

import collections
#Leetcode 104, Maximum Depth of Binary Tree
#The maximum depth is the number of nodes along the longest path 
# from the root node down to the farthest leaf node.
class Solution(object):

	def maxDepth(self, root):
	
		depth = 0
		
		if not root:
			return 0
		
		depth +=1+ max(self.maxDepth(root.left), self.maxDepth(root.right))
		
		return depth
		
		
class TreeNode:

	def __init__(self, val, left=None, right=None):
		self.val = val
		self.left = left
		self.right = right					
def main():

	
	#l7 = TreeNode(7, TreeNode(10), TreeNode(11))
	#l15 = TreeNode(15, TreeNode(2), TreeNode(20))	
	l7 = TreeNode(7)
	l15 = TreeNode(15)	
	l9 = TreeNode(9)
	l20 = TreeNode(20, l15,l7)	
	l3 = TreeNode(3, l9,l20)
	
	
	sol = Solution()
	depth = sol.maxDepth(l3)
	print("maxDepth", depth)
	
if __name__=="__main__":main()
