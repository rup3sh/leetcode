#!/bin/python3

#53. Maximum Subarray 
#Find the contiguous subarray within an array (containing at least one number)
# which has the largest sum.

#For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
#the contiguous subarray [4,-1,2,1] has the largest sum = 6.  

class Solution(object):
	
	def maxSubArray(self, nums):

		maxSum = nums[0]
		currSum= nums[0]
		subarr_s = 0
		subarr_end = 0

		for i, num in enumerate(nums[1:]):

			#print(i, num)
			curr = num + currSum
			if curr>num:
				currSum=curr
			else:
				subarr_s = i+1
				subarr_end = i+1
				currSum = num 
				
			if currSum>maxSum:
				maxSum = currSum
				subarr_end = i+1
						
		#print(subarr_s, subarr_end)
		return maxSum
					
def main():

	sol = Solution()
	
	num2 = [-2,1,-3,4,-1,2,1,-5,4]
	print("Number:", num2)
	val = sol.maxSubArray(num2)
	print("Result", val)
	
if __name__=="__main__":main()
