#!/bin/python3

#287. Find the Duplicate Number
# Given an array nums containing n + 1 integers where each integer is 
# between 1 and n (inclusive), prove that at least one duplicate number must 
# exist. 

class Solution(object):
    def findDuplicate(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        low = 0
        high = len(nums)-1
        
        while low < high:
            mid = low+(high-low)//2
            count = 0
            for i in nums:
                if i <= mid:
                    count+=1
            #print("Middle:", mid, "NumMid:", nums[mid], "Count:", count)
	    		    
            if count <= mid:
                low = mid+1
            else:
                high = mid
		
        return low	 		
					
def main():

	sol = Solution()
	
	num2 = [1,2,3,3,4,5,6,7,8,9,10]
	print("Number:", num2)
	val = sol.findDuplicate(num2)
	print("Result", val)
	
if __name__=="__main__":main()
